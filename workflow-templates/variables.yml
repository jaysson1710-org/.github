# This is a basic workflow to help you get started with Actions

name: variables_manage

# Controls when the workflow will run
on: [workflow_dispatch]
  
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      valor: ${{ steps.export.outputs.valor }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: export value
        id: export
        run: |
          valor="This option works to send variables among jobs"
          echo $valor
          echo "valor=$valor" >> "$GITHUB_OUTPUT"
      - name: expose
        shell: bash
        run: |
          TERMINUS_RELEASE="This option works to send variables among steps"
          echo "TERMINUS_RELEASE=$TERMINUS_RELEASE" >> $GITHUB_ENV
      - name: present
        shell: bash
        run: |
          echo $valor2
        env:
          valor2: ${{ env.TERMINUS_RELEASE }}
      - name: present2
        shell: bash
        run: |
          echo $TERMINUS_RELEASE
      - name: output2
        run: |
          echo ${{ steps.export.outputs.valor }}
          echo "VALORR=${{ steps.export.outputs.valor }}" >> $GITHUB_ENV
      - name: con variables de entorno
        run: |
          echo $valor3
        env:
          valor3: ${{ env.VALORR }}
        
        
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    env:
      valor: ${{ needs.build.outputs.valor }}
    steps:   
      # Runs a set of commands using the runners shell
      - name: present variable
        run: |
          echo Add other actions to build,
          echo $valor

  # This workflow contains a single job called "build"
  build2:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    outputs:
      valor: ${{ steps.export.outputs.valor }}
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: export value
        id: export
        run: |
          valor="Hello, world!"
          echo $valor
          echo "valor=$valor" >> "$GITHUB_OUTPUT"
      - name: expose
        shell: bash
        run: |
          TERMINUS_RELEASE="valor_release"
          echo "TERMINUS_RELEASE=$TERMINUS_RELEASE" >> $GITHUB_ENV
      - name: present
        shell: bash
        run: |
          echo $valor
        env:
          valor: ${{ env.TERMINUS_RELEASE }}
      - name: present2
        shell: bash
        run: |
          echo $TERMINUS_RELEASE
        
  deploy2:
    runs-on: ubuntu-latest
    needs: [build]
    env:
      valor: ${{ needs.build.outputs.valor }}
    steps:   
      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo $valor
      - name: present1
        shell: bash
        run: |
          echo $test
        env:
          test: ${{ env.TERMINUS_RELEASE}}
      - name: present2
        shell: bash
        run: |
          echo $TERMINUS_RELEASE


  build-and-deploy:
    runs-on: windows-latest # For Linux, use ubuntu-latest
    environment: dev
    steps:
  
    - name: 'create json'
      id: createjson
      shell: pwsh
      run: |
        
        # Method 1: Using a hashtable and ConvertTo-Json
        $jsonObject = @{
            "subscriptionId" = "$env:SUBSCRIPTIONID"
            "clientId" = "$env:CLIENTID"
            "clientSecret" = "$env:CLIENTSECRET"
            "tenantId" = "$env:TENANTID"
        }
        
        $json = $jsonObject | ConvertTo-Json -Compress
        echo $json
        
        ##"AZURE_RBAC_CREDENTIALS=$json" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
        Add-Content -Path $env:GITHUB_ENV -Value "AZURE_RBAC_CREDENTIALS=$json"
        Write-Output $json
      env:
        CLIENTID: ${{ secrets.CLIENTID }}
        CLIENTSECRET: ${{ secrets.CLIENTSECRET }}
        SUBSCRIPTIONID: ${{ vars.SUBSCRIPTIONID }}
        TENANTID: ${{ secrets.TENANTID }}
    # If you want to use Azure RBAC instead of Publish Profile, then uncomment the task below
    - name: "echo"
      shell: pwsh
      run: |
        echo $env:creds
        echo "2"
        echo $env.AZURE_RBAC_CREDENTIALS
      env:
        creds: ${{ env.AZURE_RBAC_CREDENTIALS }}
      
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
         creds: ${{ env.AZURE_RBAC_CREDENTIALS }} # set up AZURE_RBAC_CREDENTIALS secrets in your repository

    
